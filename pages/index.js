import useSWRInfinite from "swr/infinite"
import Head from "next/head"
import Image from "next/image"
import styles from "../styles/home.module.css"

import PostCard from "../components/feed/PostCard"

export default function Home({ data }) {
	// const getKey = () => {
	// 	return `/api/saved-posts-dev/1`
	// }
	// const { data, error, size, setSize } = useSWRInfinite(getKey, fetchSavedPosts)

	// const handleFetchMore = () => setSize(size + 1)
	// if (error)
	// 	return (
	// 		<p>
	// 			Wow, you have terrible taste. We can&lsquo;t work with this!
	// 			<p>
	// 				Just kidding--there was a problem. That&lsquo;s our bad. Your saved
	// 				posts are probably amazing.
	// 			</p>
	// 		</p>
	// 	)

	function shuffle(array) {
		let currentIndex = array.length,
			randomIndex

		// While there remain elements to shuffle...
		while (currentIndex != 0) {
			// Pick a remaining element...
			randomIndex = Math.floor(Math.random() * currentIndex)
			currentIndex--

			// And swap it with the current element.
			;[array[currentIndex], array[randomIndex]] = [
				array[randomIndex],
				array[currentIndex],
			]
		}

		return array
	}
	if (!data) return <p>Loading...</p>

	if (data && typeof data !== undefined) {
		// console.log(data.flat(3))
		// console.log(data.forEach((set) => console.log(set.data)))
		// data[0].data.map((item) => console.log(item.preview.enabled))
		return (
			<div className={styles.container}>
				<Head>
					<title>Create Next App</title>
					<meta name="description" content="Generated by create next app" />
					<link rel="icon" href="/favicon.ico" />
				</Head>
				<h1>Hello!</h1>

				{data[0] &&
					shuffle(data.flat(3)).map((item) => (
						<PostCard key={item.name} item={item} />
					))}

				<button className="fetch-more">Fetch More</button>
			</div>
		)
	}
}
export async function getServerSideProps() {
	const bodyData = { currentPostFullname: "t3_rtuh19" }
	try {
		const response = await fetch("http://localhost:3000/api/saved-posts-dev", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify(bodyData),
		})
		const rawData = await response.json()
		const indexedData = await rawData.data.map((post, postIndex) => ({
			...post,
			initialIndex: postIndex,
		}))

		const data = indexedData

		return { props: { data } }
	} catch (error) {
		console.log(error)
		return error
	}

	// Pass data to the page via props
}
